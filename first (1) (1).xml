<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declaration//This model corresponds to the second solution to the Dining //Philosophers Problem discussed by Stallings //in Figure 6.13 (Operating Systems, Fifth edition). //Model constructed by Frits Vaandrager on 21/3/06 const int M = 6; //Number of semaphores const int N = 5; //Number of philosophers const int room = 5; chan semWait[M][N]; chan semSignal[M][N]; chan semGo[M][N];
int[0,1] fork1=1;
int[0,1] fork2=1;
int[0,1] fork3=1;
int[0,1] fork4=1;
int[0,1] fork5=1;
int[0,4] id[5];
chan unblock[5];
int[0,1] blocked[5];</declaration><template><name x="5" y="5">mutex</name><parameter>const int id, int[0,1] &amp;fork_one, int[0,1] &amp;fork_two</parameter><declaration>// Place local declarations here.
 clock x;</declaration><location id="id0" x="-368" y="-56"><committed/></location><location id="id1" x="-272" y="80"><committed/></location><location id="id2" x="-240" y="8"><committed/></location><location id="id3" x="-136" y="-8"><committed/></location><location id="id4" x="-176" y="-80"><committed/></location><location id="id5" x="-192" y="-184"><committed/></location><location id="id6" x="392" y="-160"><name x="382" y="-190">dintgetforks</name></location><location id="id7" x="-32" y="-48"><name x="-42" y="-78">finishedeating</name><committed/></location><location id="id8" x="392" y="32"><name x="382" y="2">takeforks</name><committed/></location><location id="id9" x="272" y="-88"><name x="262" y="-118">Hungry</name><committed/></location><location id="id10" x="48" y="168"><name x="38" y="138">Eating</name><label kind="invariant" x="38" y="185">x&lt;=2</label></location><location id="id11" x="128" y="-168"><name x="118" y="-198">Thinking</name><label kind="invariant" x="118" y="-151">x&lt;=10</label></location><init ref="id11"/><transition><source ref="id6"/><target ref="id9"/><label kind="synchronisation" x="331" y="-127">unblock[id]?</label><label kind="assignment" x="331" y="-110">blocked[id]=0</label></transition><transition><source ref="id0"/><target ref="id11"/><label kind="synchronisation" x="-442" y="-187">unblock[(id+1)%5]!</label><nail x="-272" y="-344"/><nail x="216" y="-312"/></transition><transition><source ref="id1"/><target ref="id0"/><label kind="synchronisation" x="-380" y="-3">unblock[(id+5-1)%5]!</label></transition><transition><source ref="id7"/><target ref="id1"/><label kind="guard" x="-224" y="56">blocked[(id+5-1)%5]==1 &amp;&amp; blocked[(id+1)%5]==1</label><nail x="-196" y="190"/></transition><transition><source ref="id2"/><target ref="id11"/><nail x="-264" y="-240"/><nail x="88" y="-248"/></transition><transition><source ref="id3"/><target ref="id2"/><label kind="synchronisation" x="-248" y="8">unblock[(id+5-1)%5]!</label></transition><transition><source ref="id7"/><target ref="id3"/><label kind="guard" x="-104" y="-24">blocked[(id+5-1)%5]==1 &amp;&amp; blocked[(id+1)%5]==0</label></transition><transition><source ref="id5"/><target ref="id11"/></transition><transition><source ref="id4"/><target ref="id5"/><label kind="synchronisation" x="-328" y="-160">unblock[(id+1)%5]!</label></transition><transition><source ref="id7"/><target ref="id4"/><label kind="guard" x="-184" y="-104">blocked[(id+1)%5]==1 &amp;&amp; blocked[(id+5-1)%5]==0</label></transition><transition><source ref="id7"/><target ref="id11"/><label kind="guard" x="-12" y="-138">blocked[(id+5-1)%5]==0 &amp;&amp; blocked[(id+1)%5]==0</label><label kind="assignment" x="-14" y="-108">x:=0</label></transition><transition><source ref="id8"/><target ref="id6"/><label kind="guard" x="476" y="-82">(fork_one==0 &amp;&amp; fork_two==0) || (fork_one==0 &amp;&amp; fork_two==1) || (fork_one==1 &amp;&amp; fork_two==0)</label><label kind="assignment" x="528" y="-168">blocked[id]=1</label><nail x="652" y="-88"/><nail x="556" y="-144"/></transition><transition><source ref="id9"/><target ref="id8"/></transition><transition><source ref="id10"/><target ref="id7"/><label kind="assignment" x="-88" y="24">fork_one=1,
fork_two=1</label><nail x="-16" y="-32"/></transition><transition><source ref="id8"/><target ref="id10"/><label kind="guard" x="112" y="96">fork_one==1 &amp;&amp; fork_two==1</label><label kind="assignment" x="96" y="176">fork_one:=0,
fork_two:=0,
x:=0</label><nail x="352" y="120"/></transition><transition><source ref="id11"/><target ref="id9"/><label kind="guard" x="146" y="-162">x&gt;4</label></transition></template><system>// Place template instantiations here.
//Process = mutex(me,fork_one,fork_two);
P1 = mutex(0,fork1,fork5);
P2 = mutex(1,fork1,fork2);
P3 = mutex(2,fork2,fork3);
P4 = mutex(3,fork3,fork4);
P5 = mutex(4,fork4,fork5);

// List one or more processes to be composed into a system.
system P1, P2, P3, P4, P5;</system></nta>